// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package pgstore

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProducts = `-- name: CreateProducts :one
INSERT INTO products(
  "id", 
  "seller_id",
  "product_name",
  "description",
  "baseprice",
  "auction_end",
  "is_sold") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id
`

type CreateProductsParams struct {
	ID          uuid.UUID   `json:"id"`
	SellerID    uuid.UUID   `json:"seller_id"`
	ProductName string      `json:"product_name"`
	Description string      `json:"description"`
	Baseprice   float64     `json:"baseprice"`
	AuctionEnd  time.Time   `json:"auction_end"`
	IsSold      pgtype.Bool `json:"is_sold"`
}

func (q *Queries) CreateProducts(ctx context.Context, arg CreateProductsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProducts,
		arg.ID,
		arg.SellerID,
		arg.ProductName,
		arg.Description,
		arg.Baseprice,
		arg.AuctionEnd,
		arg.IsSold,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProductsById = `-- name: GetProductsById :one
SELECT id, seller_id, product_name, description, baseprice, auction_end, is_sold, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductsById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductsById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.SellerID,
		&i.ProductName,
		&i.Description,
		&i.Baseprice,
		&i.AuctionEnd,
		&i.IsSold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
